// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma-client"
}

// --------------------------------------
// Core
// --------------------------------------

model Shop {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  name          String     @unique
  type          String
  latitude      Float
  longitude     Float
  brands        Brand[]
  favoriteUsers UserShop[] @relation("UserFavoriteShops")
  reviews       Review[]
}

model Brand {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  name          String      @unique
  type          String
  shops         Shop[]
  favoriteUsers UserBrand[] @relation("UserFavoriteBrands")
}

// --------------------------------------
// Auth
// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  // Profile fields
  avatar   String? // URL to profile picture
  bio      String? // User bio/description
  location String? // User's location
  phone    String? // Phone number

  // Preferences
  preferences String? // Store user preferences as JSON string

  // Relationships
  tokens         Token[]
  sessions       Session[]
  favoriteBrands UserBrand[] @relation("UserFavoriteBrands")
  favoriteShops  UserShop[]  @relation("UserFavoriteShops")
  reviews        Review[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

// --------------------------------------
// User Relationships
// --------------------------------------

model UserBrand {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  brandId   Int

  user  User  @relation("UserFavoriteBrands", fields: [userId], references: [id], onDelete: Cascade)
  brand Brand @relation("UserFavoriteBrands", fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([userId, brandId])
}

model UserShop {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  shopId    Int

  user User @relation("UserFavoriteShops", fields: [userId], references: [id], onDelete: Cascade)
  shop Shop @relation("UserFavoriteShops", fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([userId, shopId])
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int      @default(0)
  comment   String?
  userId    Int
  shopId    Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([userId, shopId])
}
